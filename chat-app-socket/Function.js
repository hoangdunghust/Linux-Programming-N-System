// File: Function.js
const net = require("net");
const readline = require("readline");
const { getMyIP, isValidIP } = require("./helpers");
const {
  addConnection,
  removeConnection,
  listConnections,
  getConnectionById,
  connections,
} = require("./connection");

// H√†m hi·ªÉn th·ªã IP c·ªßa b·∫°n
function showMyIP() {
  console.log("IP c·ªßa b·∫°n l√†:", getMyIP());
}

// H√†m hi·ªÉn th·ªã port ƒëang l·∫Øng nghe
function showMyPort(port) {
  console.log("ƒêang l·∫Øng nghe ·ªü port:", PORT);
}

// H√†m k·∫øt n·ªëi ƒë·∫øn peer kh√°c
function connectToPeer(ip, port) {
  if (!isValidIP(ip) || isNaN(port)) {
    console.log("ƒê·ªãa ch·ªâ IP ho·∫∑c port kh√¥ng h·ª£p l·ªá");
    return;
  }
  const socket = new net.Socket();
  socket.setTimeout(5000); // Timeout 5 gi√¢y
  socket.connect(port, ip, () => {
    addConnection(socket, ip, port);
    console.log("ƒê√£ k·∫øt n·ªëi ƒë·∫øn", ip + ":" + port);
  });

  socket.on("data", (data) => {
    const conn = connections.find((c) => c.socket === socket);
    const name = conn.name || "";
    console.log(
      `\nNh·∫≠n t·ª´ ${name}:${conn.ip}:${conn.port}: ${data.toString()}`
    );
    rl.prompt();
  });

  socket.on("close", () => {
    removeConnection(socket);
    console.log(`M·∫•t k·∫øt n·ªëi v·ªõi ${ip}:${port}`);
  });
}

// H√†m li·ªát k√™ c√°c k·∫øt n·ªëi
function listAllConnections() {
  listConnections();
  rl.prompt();
}

// H√†m ng·∫Øt k·∫øt n·ªëi theo ID
function terminateConnection(id) {
  const conn = getConnectionById(id);
  if (!conn) {
    console.log("ID kh√¥ng t·ªìn t·∫°i");
    return;
  }
  conn.socket.end();
  removeConnection(conn.socket);
  console.log("ƒê√£ ng·∫Øt k·∫øt n·ªëi");
}

// H√†m g·ª≠i tin nh·∫Øn t·ªõi k·∫øt n·ªëi theo ID ho·∫∑c t√™n
function sendMessage(identifier, message) {
  let target;
  if (!isNaN(parseInt(identifier))) {
    const id = parseInt(identifier);
    target = connections.find((c) => c.id === id);
  } else {
    target = connections.find((c) => c.name === identifier);
  }

  if (!target) {
    console.log("ID ho·∫∑c t√™n kh√¥ng h·ª£p l·ªá.");
  } else {
    target.socket.write(message);
    console.log(
      `\nƒê√£ g·ª≠i ƒë·∫øn ${target.name} (${target.ip}:${target.port}): ${message}`
    );
  }
}

// H√†m g√°n t√™n cho k·∫øt n·ªëi
function addNameToConnection(id, newName) {
  const connect = connections.find((c) => c.id === id);
  if (!connect) {
    console.log("Kh√¥ng t√¨m th·∫•y ID k·∫øt n·ªëi");
  } else {
    connect.name = newName;
    console.log(`ƒê√£ g√°n t√™n '${newName}' cho k·∫øt n·ªëi ID ${id}`);
  }
}

// H√†m tho√°t ch∆∞∆°ng tr√¨nh
function exitProgram() {
  console.log("üîö ƒêang tho√°t...");
  process.exit(0);
}
module.exports = {
  showMyIP,
  showMyPort,
  connectToPeer,
  listAllConnections,
  terminateConnection,
  sendMessage,
  addNameToConnection,
  exitProgram,
};
